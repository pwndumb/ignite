"some custom configuration
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
" set shortmess+=I

" Show line numbers.
set number
set relativenumber

" vim airline
" Always show the status line at the bottom, even if you only have one window open.
" let g:airline_powerline_fonts = 1
" let g:airline_theme='base16_gruvbox_dark_hard'
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#buffer_nr_show = 1
" set laststatus=2           " Always display the status bar

"Optional themes for airline/lightline
" let g:airline_theme='monokai_tasty'                   " airline theme
" vim-airline
" vim-airline

"
" vim airline vconfiguration (https://vim-bootstrap.com/)
"

let g:airline#extensions#virtualenv#enabled = 1

let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1
"
" vim airline variables (https://vim-bootstrap.com/)

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif


" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set fileformats=unix,dos,mac

"" remember last cursor position
"
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"
"" remap leader key
let mapleader = " "

"" Clean search (highlight)
nnoremap <silent> <leader><tab> :noh<cr>

"" Tabs. May be overridden by autocmd rules
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab


" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

"
" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse+=a

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

"" NERDTree configuration
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
noremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <C-N> :NERDTreeToggle<CR>

" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>

"" split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap<Leader>gr :Gremove<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

  "" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>q :bp<CR>
noremap <leader>x :bn<CR>
noremap <leader>w :bn<CR>

"" Close buffer
noremap <leader>c :bd<CR>


"" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

"" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

"========================== custom shortcuts =========================

"" save and exit  file
"noremap <Leader>s :w <CR>
"noremap <Leader>Q :qa! <CR>

"" save file with sudo
noremap <Leader>W :w !sudo tee % > /dev/null

" open terminal 
noremap <Leader>t :bot terminal <CR>
"
"" Fzf maps
nnoremap <leader><leader> :GFiles<CR>
nnoremap <leader>fi       :FZF -m<CR>
nnoremap <leader>C        :Colors<CR>
nnoremap <silent> <leader> b :Buffers<CR>
" just at test
nnoremap <F5> :Buffers<CR>
" end of test
nnoremap <leader>fl       :Lines<CR>
nnoremap <leader>ag       :Ag! <C-R><C-W><CR>
nnoremap <leader>m        :History<CR>

" fzf preview. dont loose this
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

" stop anoying auto indent when paste code
nnoremap <F4> :set invpaste paste?<CR>
set pastetoggle=<F4>
set showmode

" copy and paste to/from clipboard
"vnoremap <C-c>  "+y
"map <C-v> "+p
vnoremap <C-c> "*y  :let @+=@*<CR>

"some custom 
set hlsearch
" set cursorcolumn
set cursorline


" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" vim-plug install

call plug#begin('~/.vim/plugged')
Plug 'ThePrimeagen/vim-be-good', {'do': './install.sh'}
Plug 'pangloss/vim-javascript'
Plug 'preservim/nerdtree'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', {'branch':'release'}
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'terroo/terroo-colors'
"Plug 'morhetz/gruvbox'
Plug 'sainnhe/gruvbox-material'
Plug 'embark-theme/vim', { 'as': 'embark'  }
Plug 'safv12/andromeda.vim'
if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'tibabit/vim-templates'
Plug 'dbeniamine/cheat.sh-vim'
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'kamykn/spelunker.vim'
Plug 'sheerun/vim-polyglot'
Plug 'patstockwell/vim-monokai-tasty' 
Plug 'co1ncidence/monokai-pro.vim'
Plug 'senran101604/neotrix.vim'
Plug 'ferrine/md-img-paste.vim'
Plug 'thaerkh/vim-workspace'
Plug 'bling/vim-bufferline'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'Mizux/vim-colorschemes'
call plug#end()

" md-md-image-paste
autocmd FileType markdown nmap <buffer><silent> <leader>p :call

"spell check enable for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell

" python configuration for run sripts
autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>
" 
"============================ Visual configuration ===============================
 
" visual settings themes and colors
"monokai_tasty settings
let g:vim_monokai_tasty_italic = 1                    " allow italics, set this before the colorscheme
colorscheme vim-monokai-tasty                         " set the colorscheme

" set column to 80
"set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

" set RainbowToggle
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle" 
"
" themes and color scheme
"settings for gruvbox https://github.com/sainnhe/gruvbox-material
" Important!!
if has('termguicolors')
  set termguicolors
endif
" For dark version.
set background=dark
" For light version.
"set background=light
" Set contrast.
" This configuration option should be placed before `colorscheme gruvbox-material`.
" Available values: 'hard', 'medium'(default), 'soft'
let g:gruvbox_material_background = 'hard'
let no_buffers_menu=1
colorscheme pencil
" colorscheme gruvbox-material
syntax on
"
"
"
"========================= session configuration  go away and come back============================
let g:workspace_create_new_tabs = 0  " enabled = 1 (default), disabled = 0
"It is recommended you bind this command to a convenient shortcut, such as the following:
nnoremap <leader>s :ToggleWorkspace<CR>

"The following default can be configured if you wish to change the session name:
let g:workspace_session_name = 'Session.vim'

"Use g:workspace_session_directory to save all your session files in a single directory outside of your workspace. Example:

let g:workspace_session_directory = $HOME . '/.vim/sessions/'" 
